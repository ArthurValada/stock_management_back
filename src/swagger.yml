openapi: 3.0.0

info:
  title: API do InsideOut
  description: API do programa de gerenciamento de estoque InsideOut
  version: '0.0.1'

servers:
  - url: '/api'

paths:
  /test_api:
    get:
      operationId: routes.test_api.show_test
      tags:
        - Testing_swagger
      summary: Test route for testing the thingy
      responses:
        200:
          description: "API testada com sucesso"

  /employee:
    get:
      operationId: routes.employee.read_all
      tags:
        - Employee
        - Read
      summary: Read all employees
      responses:
        200:
          description: success
    post:
      operationId: routes.employee.create
      tags:
        - Employee
        - Create
      summary: Create a new employee
      requestBody:
        description: Employee data
        required: True
        content:
          application/json:
            schema:
              x-body-name: employee
              $ref: "#/components/schemas/Employee"
      responses:
        201:
          description: success

  /employee/{id}:
    get:
      operationId: routes.employee.read_one
      tags:
        - Employee
        - Read
      summary: Get a specific employee
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: success
    put:
      operationId: routes.employee.update
      tags:
        - Employee
        - Update
      summary: Update a employee
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: success
    delete:
      operationId: routes.employee.delete
      tags:
        - Employee
        - Update
      summary: Delete a employe
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: success

  /login/{name}/{password}:
    get:
      operationId: routes.login.login_name
      tags:
        - Employee
        - Get
        - Login
        - Auth
      summary: "
      Tells wich given password matchs some employee with the given name.
      This si not safe and should be re-implemented soon.
      "
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/password'
      responses:
        200:
          description: Succefully logged in
        401:
          description: Unautorized
        404:
          description: Username not found

  /product:
    get:
      operationId: routes.product.read_all
      tags:
        - Product
        - Read
      summary: Read all products
      responses:
        200:
          description: success
    post:
      operationId: routes.product.create
      tags:
        - Product
        - Create
      summary: Create a new product
      requestBody:
        description: Product data
        required: True
        content:
          application/json:
            schema:
              x-body-name: employee
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: success

  /product/{id}:
    get:
      operationId: routes.product.read_one
      tags:
        - Product
        - Read
      summary: Get a specific product
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: success
    put:
      operationId: routes.product.update
      tags:
        - Product
        - Update
      summary: Update a product
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: success
    delete:
      operationId: routes.product.delete
      tags:
        - Product
        - Update
      summary: Delete a product
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: success

components:
  parameters:
    id:
      name: id
      in: path
      description: Item identifier
      required: true
      schema:
        type: integer
    name:
      name: name
      in: path
      required: true
      schema:
        type: string
    password:
      name: password
      in: path
      required: true
      schema:
        type: string


  schemas:
    Employee:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        date_of_birth:
          type: string
          description: "Date in format: yyyy-mm-dd"
        sex:
          type: string
        cpf:
          type: string
        password:
          type: string
        employee_type:
          type: integer
        is_active:
          type: boolean
        contacts_id:
          type: array
          items:
            type: integer
        sales_made:
          type: array
          items:
            type: integer

    Product:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
        is_active:
          type: boolean
        register:
          type: integer
          description: Foreign key of the product register's id.
        registry_date:
          type: string
          description: "Date in format: yyyy-mm-dd"  # todo: revise datatime format
        fk_batch:
          type: array
          items:
            type: integer
        fk_supplier:
          type: array
          items:
            type: integer